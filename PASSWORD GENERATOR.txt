import random
import string
import tkinter as tk
from tkinter import messagebox

# Function to generate the password
def generate_password():
    length = length_scale.get()
    include_uppercase = uppercase_var.get()
    include_lowercase = lowercase_var.get()
    include_numbers = numbers_var.get()
    include_symbols = symbols_var.get()

    # Create the character pool based on user selection
    char_pool = ''
    if include_uppercase:
        char_pool += string.ascii_uppercase
    if include_lowercase:
        char_pool += string.ascii_lowercase
    if include_numbers:
        char_pool += string.digits
    if include_symbols:
        char_pool += string.punctuation

    if not char_pool:
        messagebox.showerror("Error", "Please select at least one option")
        return
    
    # Generate the password
    password = ''.join(random.choice(char_pool) for _ in range(length))
    password_var.set(password)

# Function to copy the password to the clipboard
def copy_password():
    window.clipboard_clear()
    window.clipboard_append(password_var.get())
    messagebox.showinfo("Copied", "Password copied to clipboard")

# Function to reset the settings
def reset_settings():
    uppercase_var.set(1)
    lowercase_var.set(1)
    numbers_var.set(1)
    symbols_var.set(0)
    length_scale.set(10)
    password_var.set("")

# Create the main window
window = tk.Tk()
window.title("Password Generator")
window.geometry("400x400")
window.configure(bg='#2c3e50')

# Heading
heading_label = tk.Label(window, text="Password Generator", font=('Arial', 20, 'bold'), bg='#2c3e50', fg='white')
heading_label.pack(pady=10)

# Frame for the password and buttons
frame = tk.Frame(window, bg='#34495e', bd=5, relief=tk.RIDGE)
frame.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)

# Frame for the password display with a case
password_frame = tk.Frame(frame, bg='#2c3e50', bd=5, relief=tk.GROOVE)
password_frame.pack(pady=20, padx=10, fill=tk.BOTH)

# Label for the generated password
password_var = tk.StringVar()
password_label = tk.Label(password_frame, textvariable=password_var, font=('Arial', 16), bg='#2c3e50', fg="white", wraplength=350, justify='center')
password_label.pack(pady=20)

# Copy button
copy_button = tk.Button(frame, text="Copy Password", command=copy_password, font=('Arial', 12), bg='#16a085', fg="white")
copy_button.pack(pady=10)

# Character length slider
length_label = tk.Label(frame, text="Character Length", font=('Arial', 12), bg='#34495e', fg="white")
length_label.pack(pady=5)
length_scale = tk.Scale(frame, from_=4, to_=20, orient=tk.HORIZONTAL, length=300, bg='#34495e', fg="white", troughcolor="#1abc9c")
length_scale.set(10)
length_scale.pack()

# Checkbuttons for options
uppercase_var = tk.IntVar(value=1)
lowercase_var = tk.IntVar(value=1)
numbers_var = tk.IntVar(value=1)
symbols_var = tk.IntVar(value=0)

uppercase_check = tk.Checkbutton(frame, text="Include Uppercase Letters", variable=uppercase_var, font=('Arial', 12), bg='#34495e', fg="white", selectcolor='#2c3e50')
uppercase_check.pack(anchor='w')

lowercase_check = tk.Checkbutton(frame, text="Include Lowercase Letters", variable=lowercase_var, font=('Arial', 12), bg='#34495e', fg="white", selectcolor='#2c3e50')
lowercase_check.pack(anchor='w')

numbers_check = tk.Checkbutton(frame, text="Include Numbers", variable=numbers_var, font=('Arial', 12), bg='#34495e', fg="white", selectcolor='#2c3e50')
numbers_check.pack(anchor='w')

symbols_check = tk.Checkbutton(frame, text="Include Symbols", variable=symbols_var, font=('Arial', 12), bg='#34495e', fg="white", selectcolor='#2c3e50')
symbols_check.pack(anchor='w')

# Generate and Reset buttons
generate_button = tk.Button(frame, text="Generate", command=generate_password, font=('Arial', 16), bg='#16a085', fg="white")
generate_button.pack(pady=10)

reset_button = tk.Button(frame, text="Reset", command=reset_settings, font=('Arial', 12), bg='#e74c3c', fg="white")
reset_button.pack(pady=5)

# Start the application
window.mainloop()
